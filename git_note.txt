github 
ussername: liulinzhu2018
password:  llz920127
https://github.com/orgs/liulinzhu1/people/liulinzhu2018
https://github.com/liulinzhu2018/learn_20180611


git config --global user.name "liulinzhu2018"
git config --global user.email "13683318620@126.com"

git remote add origin git@github.com:liulinzhu2018/learn_20180611
git pull origin master --allow-unrelated-histories
git push --set-upstream origin master

最新git源码下载地址：
https://github.com/git/git/releases
https://www.kernel.org/pub/software/scm/git/

windows : FC txt1 txt2
linux   : diff -u txt1 txt2

版本控制

git config --global color.ui auto 有颜色的git输出
git --version

创建仓库
1. 本地创建仓库，执行git init命令创建仓库，之后产生.git目录，存放元数据
2. 在网页的github上能够创建仓库，创建文件，修改，提交，等等

HEAD：当前提交的名称
工作区working direction
临时区stating area
仓库repository

修改文件是在工作区进行修改的，git status 下面Changes not staged for commit 里面显示修改，
git add 将工作区的修改提交到临时区，git status 下面Changes to be committed:里面的内容就是提交到临时区的内容。
git commit -m "log" 将修改提交到本地的仓库的HEAD中，仓库中包含多个commit，每个commit中包含修改的文件。 

git add xxx是提交到临时区，git add -i交互式添加文件
git reset xxx是删除临时区的文件
git reset --hard是删除工作区或临时区的所有修改
git status 查看临时区
git diff 对比工作区和临时区文件的区别
git diff --staged 对比临时区和本地仓库的区别
git diff commitid1 commitid2 比较本地仓库中两次提交的区别
git show commitid 查看某次提交的更改

分支
git checkout -b newbranch 创建分支
git checkout -d newbranch 删除分支
git branch 查看分支
git checkout xxx 切换到分支
git push origin branchname 将分支推送到远程仓库

日志
git log --graph --oneline master newbranch
git log -n 1 查看距离当前最近的一条日志
git log --stat 查看每个commit id 下面修改的文件，以及添加和删除的长度


添加远程库
在github上创建一个仓库xxx，再在本地xxx仓库下执行git remote add origin git@github.com:user/pwd 将本地和远程的仓库关联。
git push -u origin master 将当前分支master推送到远程仓库


clone两种：
1.local到local : git clone /path/to/repository 本地路径
2.github到local：git clone username@host:/path/to/repository

fork: github到github

合并
git merge branchname 合并其他分支到自己的分支
git merge master origin/master？
git merge master branchname ？
处理冲突，先修改冲突的文件，之后git add filename 表示冲突已经修改，再进行合并。
git diff <source_branch> <target_branch> 在合并前，预览差异

合并两个分支同一个文件，如果原始文件中中有，且一个分支中有，一个分支中被删除了，那么这个最终被删除。
如果原始文件中没有，且一个分支添加了，那么最终会被添加。


推送两种：
1. 在本地克隆的远程的仓库中，推送本地改动到远程的仓库
git push origin master 将master改动提交到远程仓库，master可以换成想要推送的分支。唯一会改变的是master
git push 工作目录和暂存区也会更新
2. 在本地没有克隆远程的仓库，而是自己在本地创建的仓库，要将本地仓库的文件推送到远程的一个仓库中，步骤：
step 1 将本地仓库与远程的仓库进行关联：git remote add origin git@github.com:user/pwd
step 2 推送本地仓库的文件到远程仓库：git push -u origin master，master可以换成想要推送的分支

更新
git pull 更新本地仓库

替换本地改动
git checkout -- filename 将工作区文件的改动替换为HEAD中的内容，不会影响临时区和新添加的文件
git fetch origin 取远程仓库的内容覆盖本地的所有改动和提交。
git reset head -- filename 撤销上次暂存（取消暂存区的内容，用head指向的目录（版本库）替换暂存区）
git reset --hard head 撤销本地和暂存区的所有变动（用head指向的目录（版本库）替换本地和暂存区）
git reset --hard origin/master 撤销本地、暂存区、版本库(用远程服务器的origin/master替换本地、暂存区、版本库)
